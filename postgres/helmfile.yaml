repositories:
# To use official "stable" charts a.k.a https://github.com/helm/charts/tree/master/stable
  - name: bitnami
    url: https://charts.bitnami.com/bitnami
  # - name: nginx-stable 
  #   url: https://helm.nginx.com/stable
releases:
  - name: postgres
    chart: bitnami/postgresql
    namespace: default
    version: 8.9.3
    values:
    - resources:
        requests:
          memory: 256Mi
          cpu: 250m
        limits:
          memory: 1024Mi
          cpu: 1000m

      persistence:
        enabled: true
        ## A manually managed Persistent Volume and Claim
        ## If defined, PVC must be created manually before volume will be bound
        ## The value is evaluated as a template, so, for example, the name can depend on .Release or .Chart
        ##
        # existingClaim:

        ## The path the volume will be mounted at, useful when using different
        ## PostgreSQL images.
        ##
        mountPath: /bitnami/postgresql
        storageClass: "openebs-jiva-gpd-2repl"
        accessModes:
          - ReadWriteOnce
        size: 8Gi
        annotations: {}        
      securityContext:
        enabled: true
        fsGroup: 1001
        runAsUser: 1001        
      replication:
        enabled: false
        user: repl_user
        password: repl_password
        slaveReplicas: 1
        ## Set synchronous commit mode: on, off, remote_apply, remote_write and local
        ## ref: https://www.postgresql.org/docs/9.6/runtime-config-wal.html#GUC-WAL-LEVEL
        synchronousCommit: "off"
        ## From the number of `slaveReplicas` defined above, set the number of those that will have synchronous replication
        ## NOTE: It cannot be > slaveReplicas
        numSynchronousReplicas: 0
        ## Replication Cluster application name. Useful for defining multiple replication policies
        applicationName: my_application        
      ## PostgreSQL admin password (used when `postgresqlUsername` is not `postgres`)
      ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#creating-a-database-user-on-first-run (see note!)
      # postgresqlPostgresPassword:

      ## PostgreSQL user (has superuser privileges if username is `postgres`)
      ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#setting-the-root-password-on-first-run
      postgresqlUsername: postgres
      # postgresqlPassword:

      ## PostgreSQL password using existing secret
      ## existingSecret: secret

      ## Mount PostgreSQL secret as a file instead of passing environment variable
      # usePasswordFile: false

      ## Create a database
      ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#creating-a-database-on-first-run
      ##
      # postgresqlDatabase:

      ## PostgreSQL data dir
      ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md
      ##
      postgresqlDataDir: /bitnami/postgresql/data